# Workflow to index LLVM project.
#
# Because the build takes more than an hour, our GITHUB_TOKEN credentials may
# expire. A token `secrets.RELEASE_TOKEN` must exist with public_repo scope.
name: Index LLVM project
on:
  # Run daily at 0:20 (UTC) (arbitrary time)
  schedule:
    - cron: "20 0 * * *"
  # Allow triggering manually:
  # curl -XPOST -d '{"event_type":"index"}' \
  #  "-HAuthorization: Bearer <token>" \
  #   https://api.github.com/repos/clangd/llvm-remote-index/dispatches
  repository_dispatch: { types: index }
jobs:
  # Pick LLVM commit that is not failing buildbot tests and create release.
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Clone scripts
        uses: actions/checkout@v2
      - name: Install NPM dependencies
        run: npm install --prefix .github/actions/pick
      - name: Pick last successful commit
        id: pick
        uses: ./.github/actions/pick
        with:
          repo: llvm/llvm-project
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Compute release info
        run: |
          echo ::set-env name=RELEASE_COMMIT_SHORT::$(printf "%.12s" ${{ steps.pick.outputs.sha }})
          echo ::set-env name=RELEASE_DATE::$(date -u +%Y%m%d)
      - name: Create release
        uses: actions/create-release@master
        id: create_release
        env: { GITHUB_TOKEN: "${{ secrets.RELEASE_TOKEN }}" }
        with:
          tag_name: ${{ env.RELEASE_COMMIT_SHORT }}
          release_name: ${{ env.RELEASE_COMMIT_SHORT }}
          body: |
            index snapshot from ${{ env.RELEASE_DATE }}.

            Built from llvm/llvm-project@${{ steps.pick.outputs.sha }}.
    outputs:
      release_date: ${{ env.RELEASE_DATE }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_commit: ${{ steps.pick.outputs.sha }}
  index:
    name: Index LLVM on ${{ matrix.config.name }}
    needs: prepare
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: linux
            os: ubuntu-latest
            preinstall: sudo apt-get install ninja-build build-essential
            cmake: >
              "-DCMAKE_C_COMPILER=clang"
              "-DCMAKE_CXX_COMPILER=clang++"
    steps:
      - name: Clone scripts
        uses: actions/checkout@v2
      - name: Install system tools
        run: ${{ matrix.config.preinstall }}
      - name: Set environment variables
        run: |
          echo ::set-env name=CLANGD_DIR::clangd_index_snapshot_${{ needs.prepare.release_date }}
      - name: Clone LLVM
        uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          path: llvm-project
          ref: ${{ needs.prepare.outputs.release_commit }}
      # Build LLVM using CMake + Ninja. This step is needed to generate all
      # files in the project that will be needed later. This is quite
      # unfortunate because this step takes a very long time, but it is
      # required for a valid index.
      - name: CMake
        run: >
          mkdir ${{ env.CLANGD_DIR }}

          cmake -G Ninja -S llvm-project/llvm -B ${{ env.CLANGD_DIR }}
          "-DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra"
          "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
          ${{ matrix.config.cmake }}
      - name: Build the LLVM to make sure generated files are created for indexing
        run: |
          ninja -C ${{ env.CLANGD_DIR }} all
      - name: Fetch clangd-indexer
        run: |
          ./download_clangd_binaries.py
          unzip *.zip
          echo ::set-env name=CLANGD_INDEXER_BIN::$(find . -type f -iwholename "./clangd*/bin/clangd-indexer")
      - name: Run clangd-indexer
        run: |
          ./index_project.py ${{ env.CLANGD_DIR }}/compile_commands.json llvm.idx --clangd-indexer-bin ${{ env.CLANGD_INDEXER_BIN }}
      - name: Archive LLVM index
        run: >
          7z a llvm-index.zip
          llvm.idx
      - name: Upload upload generated index to release
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.RELEASE_TOKEN }}" }
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_name: llvm-index-${{ matrix.config.name }}-${{ needs.prepare.outputs.release_date }}.zip
          asset_path: llvm-index.zip
          asset_content_type: application/zip
